import pandas as pd


# Estrat√©gia Simples de M√©dias M√≥veis
def getMovingAverageTradeStrategy(stock_data: pd.DataFrame, fast_window=7, slow_window=40, verbose=True):
    """
    Estrat√©gia de M√©dias M√≥veis Simples.

    - Compra se a m√©dia r√°pida cruza acima da m√©dia lenta.
    - Vende se a m√©dia r√°pida cruza abaixo da m√©dia lenta.

    :param stock_data: DataFrame contendo os dados do ativo.
    :param fast_window: Per√≠odo da m√©dia m√≥vel r√°pida.
    :param slow_window: Per√≠odo da m√©dia m√≥vel lenta.
    :param verbose: Se True, imprime logs.
    :return: True (compra) ou False (venda).
    """

    # Criamos uma c√≥pia para evitar o `SettingWithCopyWarning`
    stock_data = stock_data.copy()

    # Calcula as M√©dias Moveis R√°pida e Lenta
    stock_data["ma_fast"] = stock_data["close_price"].rolling(window=fast_window).mean()
    stock_data["ma_slow"] = stock_data["close_price"].rolling(window=slow_window).mean()

    # üîπ REMOVE PER√çODOS INICIAIS COM NaN
    stock_data.dropna(subset=["ma_fast", "ma_slow"], inplace=True)

    # Se n√£o houver dados suficientes ap√≥s remover os NaNs, retorna None
    if len(stock_data) < slow_window:
        if verbose:
            print("‚ö†Ô∏è Dados insuficientes ap√≥s remo√ß√£o de NaN. Pulando per√≠odo...")
        return None

    # Pega os √∫ltimos valores das m√©dias m√≥veis
    last_ma_fast = stock_data["ma_fast"].iloc[-1]
    last_ma_slow = stock_data["ma_slow"].iloc[-1]

    # Toma a decis√£o com base na posi√ß√£o da m√©dia m√≥vel
    trade_decision = last_ma_fast > last_ma_slow  # True = Comprar, False = Vender

    if verbose:
        print("-------")
        print("üìä Estrat√©gia: Moving Average Simples")
        print(f" | √öltima M√©dia R√°pida: {last_ma_fast:.3f}")
        print(f" | √öltima M√©dia Lenta: {last_ma_slow:.3f}")
        print(f' | Decis√£o: {"Comprar" if trade_decision == True else "Vender" if trade_decision == False else "Nenhuma"}')

        print("-------")

    return trade_decision
