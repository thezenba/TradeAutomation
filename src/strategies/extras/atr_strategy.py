import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime

# ConfiguraÃ§Ã£o de caminhos para importaÃ§Ãµes
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
SRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

# Adicionar diretÃ³rios ao sys.path
sys.path.insert(0, PROJECT_ROOT)
sys.path.insert(0, SRC_DIR)

def getATRTradeStrategy(
    stock_data: pd.DataFrame,
    period: int = 14,
    atr_threshold: float = 1.5,
    lookback_period: int = 5,
    verbose: bool = True
):
    """
    EstratÃ©gia baseada em ATR (Average True Range).
    
    O ATR Ã© um indicador de volatilidade que mostra quÃ£o amplamente um ativo estÃ¡ 
    negociando. Este indicador nÃ£o fornece direÃ§Ã£o, apenas volatilidade.
    
    Nesta estratÃ©gia, compramos quando hÃ¡ um aumento significativo no ATR 
    (aumento de volatilidade) seguido por um movimento de preÃ§o para cima, 
    indicando forÃ§a de movimento, e vendemos quando o ATR cai significativamente,
    indicando uma possÃ­vel estabilizaÃ§Ã£o ou reversÃ£o do movimento.
    
    ParÃ¢metros:
    - period: PerÃ­odo para cÃ¡lculo do indicador ATR
    - atr_threshold: Limite percentual de variaÃ§Ã£o do ATR para gerar sinais
    - lookback_period: PerÃ­odo para verificar a tendÃªncia recente do preÃ§o
    """
    stock_data = stock_data.copy()
    
    # Verificar se temos os dados necessÃ¡rios
    required_columns = ['high', 'low', 'close']
    for col in required_columns:
        if col not in stock_data.columns:
            raise ValueError(f"Coluna {col} nÃ£o encontrada nos dados.")
    
    # Converter nomes de colunas para minÃºsculas se necessÃ¡rio
    stock_data.columns = [col.lower() for col in stock_data.columns]
    
    # Calcular o ATR
    # Primeiro, calcular o True Range (TR)
    stock_data['high_low'] = stock_data['high'] - stock_data['low']
    stock_data['high_close'] = np.abs(stock_data['high'] - stock_data['close'].shift(1))
    stock_data['low_close'] = np.abs(stock_data['low'] - stock_data['close'].shift(1))
    stock_data['tr'] = stock_data[['high_low', 'high_close', 'low_close']].max(axis=1)
    
    # Em seguida, calcular o ATR como mÃ©dia mÃ³vel do TR
    stock_data['atr'] = stock_data['tr'].rolling(window=period).mean()
    
    # Calcular a variaÃ§Ã£o percentual do ATR
    stock_data['atr_change'] = stock_data['atr'].pct_change(periods=1) * 100
    
    # Calcular a direÃ§Ã£o recente do preÃ§o
    stock_data['price_direction'] = stock_data['close'].diff(periods=lookback_period)
    
    # Determinar os sinais de compra e venda
    # Compra: ATR aumenta acima do limite e preÃ§o estÃ¡ subindo
    # Venda: ATR diminui abaixo do limite negativo
    stock_data['buy_signal'] = (stock_data['atr_change'] > atr_threshold) & (stock_data['price_direction'] > 0)
    stock_data['sell_signal'] = (stock_data['atr_change'] < -atr_threshold)
    
    # Obter o Ãºltimo sinal
    last_buy_signal = stock_data['buy_signal'].iloc[-1]
    last_sell_signal = stock_data['sell_signal'].iloc[-1]
    
    # Determinar a decisÃ£o de negociaÃ§Ã£o
    trade_decision = None
    if last_buy_signal:
        trade_decision = True  # Comprar
    elif last_sell_signal:
        trade_decision = False  # Vender
    
    # Adicionar valores para visualizaÃ§Ã£o no log
    current_atr = stock_data['atr'].iloc[-1]
    current_atr_change = stock_data['atr_change'].iloc[-1]
    price_trend = "Subindo" if stock_data['price_direction'].iloc[-1] > 0 else "Descendo"
    
    if verbose:
        print("-------")
        print(f"ğŸ“Š EstratÃ©gia: ATR")
        print(f" | PerÃ­odo: {period}")
        print(f" | ATR Atual: {current_atr:.4f}")
        print(f" | VariaÃ§Ã£o ATR: {current_atr_change:.2f}%")
        print(f" | TendÃªncia de PreÃ§o: {price_trend}")
        print(f" | Limite ATR: Â±{atr_threshold:.2f}%")
        print(f" | DecisÃ£o: {'Comprar' if trade_decision == True else 'Vender' if trade_decision == False else 'Nenhuma'}")
        print("-------")
    
    return trade_decision