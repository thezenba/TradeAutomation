import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime

# Configura√ß√£o de caminhos para importa√ß√µes
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
SRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

# Adicionar diret√≥rios ao sys.path
sys.path.insert(0, PROJECT_ROOT)
sys.path.insert(0, SRC_DIR)

def getTriangularMovingAverageTradeStrategy(
    stock_data: pd.DataFrame,
    period: int = 14,
    fast_period: int = 7,
    slow_period: int = 21,
    use_close: bool = True,
    verbose: bool = True
):
    """
    Estrat√©gia baseada em Triangular Moving Average.
    
    Par√¢metros:
    - period: Per√≠odo para c√°lculo do indicador
    - fast_period: Per√≠odo para TMA r√°pida
    - slow_period: Per√≠odo para TMA lenta
    - use_close: Usar pre√ßo de fechamento para c√°lculos
    """
    stock_data = stock_data.copy()
    
    # Verificar se a coluna de pre√ßo existe
    price_col = 'close' if use_close else 'open'
    if price_col not in stock_data.columns:
        raise ValueError(f"Coluna '{price_col}' n√£o encontrada nos dados")
    
    # Verificar se h√° dados suficientes
    if len(stock_data) < max(period, fast_period, slow_period):
        return None  # Dados insuficientes para c√°lculo
    
    # C√°lculo do Triangular Moving Average (TMA)
    # TMA √© uma m√©dia m√≥vel dupla, ou seja, uma SMA de uma SMA
    # Primeiro, calculamos a SMA
    stock_data['sma'] = stock_data[price_col].rolling(window=period).mean()
    
    # Em seguida, calculamos a SMA da SMA para obter o TMA
    stock_data['tma'] = stock_data['sma'].rolling(window=period).mean()
    
    # Calcular TMA r√°pida e lenta para sinais de cruzamento
    stock_data['fast_sma'] = stock_data[price_col].rolling(window=fast_period).mean()
    stock_data['fast_tma'] = stock_data['fast_sma'].rolling(window=fast_period).mean()
    
    stock_data['slow_sma'] = stock_data[price_col].rolling(window=slow_period).mean()
    stock_data['slow_tma'] = stock_data['slow_sma'].rolling(window=slow_period).mean()
    
    # Gerar sinais de negocia√ß√£o baseados no cruzamento do TMA r√°pido e lento
    # Quando o TMA r√°pido cruza o TMA lento para cima, √© um sinal de compra
    # Quando o TMA r√°pido cruza o TMA lento para baixo, √© um sinal de venda
    stock_data['signal'] = np.where(
        stock_data['fast_tma'] > stock_data['slow_tma'], 1,
        np.where(stock_data['fast_tma'] < stock_data['slow_tma'], -1, 0)
    )
    
    # Detectar mudan√ßa na dire√ß√£o do sinal
    stock_data['signal_change'] = stock_data['signal'].diff()
    
    # Verificar o √∫ltimo sinal
    last_signal = stock_data['signal'].iloc[-1] if not stock_data.empty else 0
    last_signal_change = stock_data['signal_change'].iloc[-1] if not stock_data.empty else 0
    
    # Decis√£o de negocia√ß√£o
    # Comprar quando o sinal √© 1 (TMA r√°pido acima do TMA lento)
    # Vender quando o sinal √© -1 (TMA r√°pido abaixo do TMA lento)
    # D√° mais import√¢ncia para sinais recentes (mudan√ßa de sinal)
    if last_signal_change > 0:  # Mudou de negativo para positivo
        trade_decision = True  # Comprar
    elif last_signal_change < 0:  # Mudou de positivo para negativo
        trade_decision = False  # Vender
    elif last_signal > 0:  # Continua√ß√£o de tend√™ncia de alta
        trade_decision = True  # Comprar
    elif last_signal < 0:  # Continua√ß√£o de tend√™ncia de baixa
        trade_decision = False  # Vender
    else:
        trade_decision = None  # Neutro
    
    if verbose:
        print("-------")
        print(f"üìä Estrat√©gia: Triangular Moving Average")
        print(f" | Per√≠odo: {period}")
        print(f" | Per√≠odo TMA R√°pido: {fast_period}")
        print(f" | Per√≠odo TMA Lento: {slow_period}")
        print(f" | √öltimo TMA: {stock_data['tma'].iloc[-1]:.2f}")
        print(f" | √öltimo TMA R√°pido: {stock_data['fast_tma'].iloc[-1]:.2f}")
        print(f" | √öltimo TMA Lento: {stock_data['slow_tma'].iloc[-1]:.2f}")
        print(f" | √öltimo Sinal: {last_signal}")
        print(f" | Mudan√ßa de Sinal: {last_signal_change}")
        print(f" | Decis√£o: {'Comprar' if trade_decision == True else 'Vender' if trade_decision == False else 'Nenhuma'}")
        print("-------")
    
    return trade_decision