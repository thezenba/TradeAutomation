import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime

# Configura√ß√£o de caminhos para importa√ß√µes
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
SRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

# Adicionar diret√≥rios ao sys.path
sys.path.insert(0, PROJECT_ROOT)
sys.path.insert(0, SRC_DIR)

def getZeroLagMovingAverageTradeStrategy(
    stock_data: pd.DataFrame,
    period: int = 14,
    signal_period: int = 9,
    threshold: float = 0.0,
    use_close: bool = True,
    verbose: bool = True
):
    """
    Estrat√©gia baseada em Zero-Lag Moving Average.
    
    Par√¢metros:
    - period: Per√≠odo para c√°lculo do indicador
    - signal_period: Per√≠odo para o c√°lculo da linha de sinal
    - threshold: Limiar para decis√£o de compra/venda
    - use_close: Usar pre√ßo de fechamento para c√°lculos
    """
    stock_data = stock_data.copy()
    
    # Verificar se a coluna de pre√ßo existe
    price_col = 'close' if use_close else 'open'
    if price_col not in stock_data.columns:
        raise ValueError(f"Coluna '{price_col}' n√£o encontrada nos dados")
    
    # C√°lculo do Zero-Lag EMA (ZLEMA)
    # ZLEMA remove o lag do EMA usando uma combina√ß√£o com valores defasados
    lag = (period - 1) // 2
    if len(stock_data) <= lag:
        return None  # Dados insuficientes para c√°lculo
    
    # C√°lculo do ZLEMA
    # F√≥rmula: ZLEMA = EMA(2*price - price.shift(lag))
    stock_data['zlema_input'] = 2 * stock_data[price_col] - stock_data[price_col].shift(lag)
    stock_data['zlema'] = stock_data['zlema_input'].ewm(span=period, adjust=False).mean()
    
    # C√°lculo da linha de sinal (m√©dia m√≥vel do ZLEMA)
    stock_data['signal_line'] = stock_data['zlema'].rolling(window=signal_period).mean()
    
    # Gerar sinais de negocia√ß√£o
    stock_data['zlema_diff'] = stock_data['zlema'] - stock_data['signal_line']
    
    # Determinar a decis√£o de negocia√ß√£o com base no √∫ltimo valor
    last_diff = stock_data['zlema_diff'].iloc[-1] if not stock_data.empty else 0
    
    # Decis√£o de negocia√ß√£o
    # Comprar quando ZLEMA estiver acima da linha de sinal por mais que o threshold
    # Vender quando ZLEMA estiver abaixo da linha de sinal por mais que o threshold
    if last_diff > threshold:
        trade_decision = True  # Comprar
    elif last_diff < -threshold:
        trade_decision = False  # Vender
    else:
        trade_decision = None  # Neutro
    
    if verbose:
        print("-------")
        print(f"üìä Estrat√©gia: Zero-Lag Moving Average")
        print(f" | Per√≠odo: {period}")
        print(f" | Per√≠odo de Sinal: {signal_period}")
        print(f" | Threshold: {threshold}")
        print(f" | √öltimo ZLEMA: {stock_data['zlema'].iloc[-1]:.2f}")
        print(f" | √öltima Linha de Sinal: {stock_data['signal_line'].iloc[-1]:.2f}")
        print(f" | Diferen√ßa: {last_diff:.2f}")
        print(f" | Decis√£o: {'Comprar' if trade_decision == True else 'Vender' if trade_decision == False else 'Nenhuma'}")
        print("-------")
    
    return trade_decision