import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime

# Configura√ß√£o de caminhos para importa√ß√µes
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
SRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

# Adicionar diret√≥rios ao sys.path
sys.path.insert(0, PROJECT_ROOT)
sys.path.insert(0, SRC_DIR)

def getHullMovingAverageTradeStrategy(
    stock_data: pd.DataFrame,
    period: int = 14,
    fast_period: int = 9,
    verbose: bool = True
):
    """
    Estrat√©gia baseada em Hull Moving Average.
    
    A Hull Moving Average (HMA) foi desenvolvida por Alan Hull para reduzir o lag
    associado √†s m√©dias m√≥veis tradicionais, mantendo a suavidade do gr√°fico.
    
    Par√¢metros:
    - period: Per√≠odo principal para c√°lculo do HMA
    - fast_period: Per√≠odo menor para o HMA r√°pido (para crossover)
    """
    stock_data = stock_data.copy()
    
    # Verificar se temos a coluna 'close'
    if 'close' not in stock_data.columns:
        # Tentar converter para min√∫sculas
        stock_data.columns = [col.lower() for col in stock_data.columns]
        if 'close' not in stock_data.columns:
            raise ValueError("Coluna 'close' n√£o encontrada nos dados.")
    
    # Fun√ß√£o para calcular o HMA
    def calculate_hma(data, n):
        # Calcular as duas WMAs (Weighted Moving Average)
        wma_n = data.rolling(window=n, min_periods=n).apply(
            lambda x: sum([(i+1) * x[i] for i in range(len(x))]) / sum([(i+1) for i in range(len(x))]), raw=True)
        
        wma_n_half = data.rolling(window=n//2, min_periods=n//2).apply(
            lambda x: sum([(i+1) * x[i] for i in range(len(x))]) / sum([(i+1) for i in range(len(x))]), raw=True)
        
        # Calcular o raw HMA
        raw_hma = 2 * wma_n_half - wma_n
        
        # Calcular o HMA final
        sqrt_n = int(np.sqrt(n))
        hma = raw_hma.rolling(window=sqrt_n, min_periods=sqrt_n).apply(
            lambda x: sum([(i+1) * x[i] for i in range(len(x))]) / sum([(i+1) for i in range(len(x))]), raw=True)
        
        return hma
    
    # Calcular o HMA principal e o HMA r√°pido
    stock_data['hma'] = calculate_hma(stock_data['close'], period)
    stock_data['hma_fast'] = calculate_hma(stock_data['close'], fast_period)
    
    # Calcular a dire√ß√£o do HMA (slope)
    stock_data['hma_slope'] = stock_data['hma'].diff()
    stock_data['hma_fast_slope'] = stock_data['hma_fast'].diff()
    
    # Extrair valores atuais
    current_close = stock_data['close'].iloc[-1]
    current_hma = stock_data['hma'].iloc[-1]
    current_hma_fast = stock_data['hma_fast'].iloc[-1]
    current_hma_slope = stock_data['hma_slope'].iloc[-1]
    current_hma_fast_slope = stock_data['hma_fast_slope'].iloc[-1]
    
    # Valores anteriores para determinar cruzamentos
    prev_close = stock_data['close'].iloc[-2] if len(stock_data) > 1 else current_close
    prev_hma = stock_data['hma'].iloc[-2] if len(stock_data) > 1 else current_hma
    prev_hma_fast = stock_data['hma_fast'].iloc[-2] if len(stock_data) > 1 else current_hma_fast
    
    # Determinar o estado atual do HMA
    is_hma_rising = current_hma_slope > 0
    is_hma_fast_rising = current_hma_fast_slope > 0
    
    # Detectar cruzamento de pre√ßo e HMA
    price_cross_up = (current_close > current_hma) and (prev_close <= prev_hma)
    price_cross_down = (current_close < current_hma) and (prev_close >= prev_hma)
    
    # Detectar cruzamento de HMA r√°pido e HMA lento
    hma_cross_up = (current_hma_fast > current_hma) and (prev_hma_fast <= prev_hma)
    hma_cross_down = (current_hma_fast < current_hma) and (prev_hma_fast >= prev_hma)
    
    # Gerar sinais de compra e venda
    # Comprar: HMA subindo e pre√ßo cruza acima do HMA, ou HMA r√°pido cruza acima do HMA lento
    # Vender: HMA descendo e pre√ßo cruza abaixo do HMA, ou HMA r√°pido cruza abaixo do HMA lento
    
    buy_signal = (is_hma_rising and price_cross_up) or hma_cross_up
    sell_signal = (not is_hma_rising and price_cross_down) or hma_cross_down
    
    # Decis√£o final
    trade_decision = None
    
    if buy_signal:
        trade_decision = True  # Comprar
    elif sell_signal:
        trade_decision = False  # Vender
    
    if verbose:
        print("-------")
        print(f"üìä Estrat√©gia: Hull Moving Average")
        print(f" | Per√≠odo: {period}")
        print(f" | Per√≠odo R√°pido: {fast_period}")
        print(f" | Pre√ßo Atual: {current_close:.2f}")
        print(f" | HMA: {current_hma:.2f}")
        print(f" | HMA R√°pido: {current_hma_fast:.2f}")
        print(f" | HMA Crescendo: {is_hma_rising}")
        print(f" | HMA R√°pido Crescendo: {is_hma_fast_rising}")
        print(f" | Cruzamento de Pre√ßo e HMA (Para Cima): {price_cross_up}")
        print(f" | Cruzamento de Pre√ßo e HMA (Para Baixo): {price_cross_down}")
        print(f" | Cruzamento de HMA R√°pido e HMA (Para Cima): {hma_cross_up}")
        print(f" | Cruzamento de HMA R√°pido e HMA (Para Baixo): {hma_cross_down}")
        print(f" | Decis√£o: {'Comprar' if trade_decision == True else 'Vender' if trade_decision == False else 'Nenhuma'}")
        print("-------")
    
    return trade_decision