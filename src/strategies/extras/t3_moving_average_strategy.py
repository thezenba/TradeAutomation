import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime

# Configura√ß√£o de caminhos para importa√ß√µes
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
SRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

# Adicionar diret√≥rios ao sys.path
sys.path.insert(0, PROJECT_ROOT)
sys.path.insert(0, SRC_DIR)

def getT3MovingAverageTradeStrategy(
    stock_data: pd.DataFrame,
    period: int = 14,
    volume_factor: float = 0.7,
    fast_period: int = 7,
    slow_period: int = 21,
    use_close: bool = True,
    verbose: bool = True
):
    """
    Estrat√©gia baseada em T3 Moving Average (Tillson T3).
    
    Par√¢metros:
    - period: Per√≠odo para c√°lculo do indicador
    - volume_factor: Fator de volume (0-1, padr√£o=0.7)
    - fast_period: Per√≠odo para T3 r√°pida
    - slow_period: Per√≠odo para T3 lenta
    - use_close: Usar pre√ßo de fechamento para c√°lculos
    """
    stock_data = stock_data.copy()
    
    # Verificar se a coluna de pre√ßo existe
    price_col = 'close' if use_close else 'open'
    if price_col not in stock_data.columns:
        raise ValueError(f"Coluna '{price_col}' n√£o encontrada nos dados")
    
    # Verificar se h√° dados suficientes
    if len(stock_data) <= max(period, fast_period, slow_period) * 6:  # T3 requer mais dados (6 EMAs)
        return None  # Dados insuficientes para c√°lculo
    
    # Fun√ß√£o para calcular T3 Moving Average
    def calculate_t3(data, period, vfactor):
        # Calcular o fator de suaviza√ß√£o (c1)
        c1 = -vfactor * vfactor * vfactor
        
        # Calcular EMA 1
        e1 = data.ewm(span=period, adjust=False).mean()
        
        # Calcular EMA 2
        e2 = e1.ewm(span=period, adjust=False).mean()
        
        # Calcular EMA 3
        e3 = e2.ewm(span=period, adjust=False).mean()
        
        # Calcular EMA 4
        e4 = e3.ewm(span=period, adjust=False).mean()
        
        # Calcular EMA 5
        e5 = e4.ewm(span=period, adjust=False).mean()
        
        # Calcular EMA 6
        e6 = e5.ewm(span=period, adjust=False).mean()
        
        # Calcular T3 usando a f√≥rmula de Tillson
        t3 = c1 * e6 + 3 * vfactor * c1 * e5 + 3 * vfactor * vfactor * c1 * e4 + vfactor * vfactor * vfactor * e3
        
        return t3
    
    # Calcular T3 principal
    stock_data['t3'] = calculate_t3(stock_data[price_col], period, volume_factor)
    
    # Calcular T3 r√°pida e lenta para sinais de cruzamento
    stock_data['fast_t3'] = calculate_t3(stock_data[price_col], fast_period, volume_factor)
    stock_data['slow_t3'] = calculate_t3(stock_data[price_col], slow_period, volume_factor)
    
    # Gerar sinais de negocia√ß√£o baseados no cruzamento do T3 r√°pido e lento
    stock_data['signal'] = np.where(
        stock_data['fast_t3'] > stock_data['slow_t3'], 1,
        np.where(stock_data['fast_t3'] < stock_data['slow_t3'], -1, 0)
    )
    
    # Verificar a inclina√ß√£o do T3 (tend√™ncia)
    stock_data['t3_slope'] = stock_data['t3'].diff(3)  # Diferen√ßa com 3 per√≠odos para suavizar
    
    # Detectar mudan√ßa na dire√ß√£o do sinal
    stock_data['signal_change'] = stock_data['signal'].diff()
    
    # Verificar o √∫ltimo sinal
    last_signal = stock_data['signal'].iloc[-1] if not stock_data.empty else 0
    last_signal_change = stock_data['signal_change'].iloc[-1] if not stock_data.empty else 0
    last_t3_slope = stock_data['t3_slope'].iloc[-1] if not stock_data.empty else 0
    
    # Decis√£o de negocia√ß√£o
    # Comprar quando T3 r√°pido cruza T3 lento para cima, ou quando a inclina√ß√£o do T3 √© positiva
    # Vender quando T3 r√°pido cruza T3 lento para baixo, ou quando a inclina√ß√£o do T3 √© negativa
    if last_signal_change > 0:  # Mudou de negativo para positivo (cruzamento de alta)
        trade_decision = True  # Comprar
    elif last_signal_change < 0:  # Mudou de positivo para negativo (cruzamento de baixa)
        trade_decision = False  # Vender
    elif last_signal > 0 and last_t3_slope > 0:  # Continua√ß√£o de tend√™ncia de alta
        trade_decision = True  # Comprar
    elif last_signal < 0 and last_t3_slope < 0:  # Continua√ß√£o de tend√™ncia de baixa
        trade_decision = False  # Vender
    else:
        trade_decision = None  # Neutro
    
    if verbose:
        print("-------")
        print(f"üìä Estrat√©gia: T3 Moving Average")
        print(f" | Per√≠odo: {period}")
        print(f" | Fator de Volume: {volume_factor}")
        print(f" | Per√≠odo T3 R√°pido: {fast_period}")
        print(f" | Per√≠odo T3 Lento: {slow_period}")
        print(f" | √öltimo T3: {stock_data['t3'].iloc[-1]:.2f}")
        print(f" | √öltimo T3 R√°pido: {stock_data['fast_t3'].iloc[-1]:.2f}")
        print(f" | √öltimo T3 Lento: {stock_data['slow_t3'].iloc[-1]:.2f}")
        print(f" | Inclina√ß√£o T3: {last_t3_slope:.4f}")
        print(f" | √öltimo Sinal: {last_signal}")
        print(f" | Mudan√ßa de Sinal: {last_signal_change}")
        print(f" | Decis√£o: {'Comprar' if trade_decision == True else 'Vender' if trade_decision == False else 'Nenhuma'}")
        print("-------")
    
    return trade_decision